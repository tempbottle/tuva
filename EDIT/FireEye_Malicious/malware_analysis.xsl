<?xml version="1.0"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">
     
  <xsl:variable name="cnc_services" select="/analyses_with_cncs/cnc_services/cnc_service"/>
  <xsl:template match="analyses_with_cncs">
    <html>
      <head>
        <title>Malware Analysis results dumped at: <xsl:value-of select="@dumped_at" /></title>
        <link rel="stylesheet" type="text/css" href="xml_style.css" />
      </head>
      <body>
        <strong>Malware Analysis results dumped at: </strong><xsl:value-of select="@dumped_at" />&#160;|&#160;
        <strong>Filter Column: </strong><xsl:value-of select="@filter_col" />&#160;|&#160;
        <strong>Filter Value: </strong><xsl:value-of select="@filter_text" />&#160;|&#160;
        <strong>Analysis: </strong><xsl:value-of select="count(analyses/analysis)" />
        <table align="left" border="1" cellspacing="0" cellpadding="2" width="100%">
          <thead class="th_color_1">
            <tr>
              <th>ID</th>
              <th>Analysis Type</th>
              <th>Profile</th>
              <th>Status</th>
              <th>URL</th>
              <th>Events</th>
            </tr>
          </thead>
          <xsl:apply-templates select="analyses/analysis">
            <xsl:sort select="@id" data-type="number"/>
          </xsl:apply-templates>
        </table>
      </body>
    </html>
  </xsl:template>
  
  <xsl:template match="analysis">
    <tr align="left" valign="middle">
      <td valign="top">
        <xsl:if test="event"><xsl:attribute name="rowspan">2</xsl:attribute></xsl:if>
        <xsl:value-of select="@id"/>
      </td>
      <td><xsl:value-of select="@analysis_type"/></td>
      <td><xsl:value-of select="@profile_name"/></td>
      <td><xsl:value-of select="@status_code"/></td>
      <td><xsl:value-of select="@url"/></td>
      <td><xsl:value-of select="count(event)"/></td>
    </tr>
    <xsl:if test="event">
      <tr align="left" valign="middle">
        <td colspan="5">
          <table align="left" border="1" cellspacing="0" cellpadding="2" width="100%">
            <thead class="th_color_2">
              <tr align="left" valign="middle">
                <th>ID</th>
                <th>Event Type</th>
                <th>Malware Name</th>
                <th>Date/Time</th>
                <th>Source IP</th>
                <th>Destination IP</th>
                <th>Detail</th>
              </tr>
            </thead>
            <xsl:apply-templates select="event">
              <xsl:sort select="@id" data-type="number"/>
            </xsl:apply-templates>
          </table>
        </td>
      </tr> 
    </xsl:if>
  </xsl:template>
  
  <xsl:template match="event">
    <xsl:variable name="os_changes" select="os_change[count(*/*) &gt; 0]/*[not(self::end-of-report)]"/>
    <xsl:variable name="os_change_count" select="count($os_changes)"/>
    <xsl:variable name="cncs_this_event" select="$cnc_services[@id=current()/cnc_service_id]"/>
    <xsl:variable name="rows_to_span">
      <xsl:choose>
        <xsl:when test="$os_changes and $cncs_this_event">3</xsl:when>
        <xsl:when test="$os_changes|$cncs_this_event">2</xsl:when>
        <xsl:otherwise>0</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <tr align="left" valign="top">
      <td>
        <xsl:if test="$rows_to_span > 0">
          <xsl:attribute name="rowspan"><xsl:value-of select="$rows_to_span" /></xsl:attribute>
        </xsl:if>
        <xsl:value-of select="@id"/>
      </td>
      <td><xsl:value-of select="@event_type"/></td>
      <td><xsl:value-of select="@signature_name"/></td>
      <td><xsl:value-of select="@occurred"/></td>
      <xsl:for-each select="@src_ip|@dst_ip">
        <td>
          <xsl:choose>
            <xsl:when test=".!='0.0.0.0' and .!='0'"><xsl:value-of select="." /><xsl:if test=". = '199.16.199.2' or starts-with(.,'11.1.0.')">&#160;(sandbox)</xsl:if></xsl:when>
            <xsl:otherwise>&#160;</xsl:otherwise>
          </xsl:choose>
        </td>
      </xsl:for-each>
      <td>
        <xsl:choose>
          <xsl:when test="$os_changes">
            OS Changes: <xsl:value-of select="$os_change_count"/>
          </xsl:when>
          <xsl:when test="$cncs_this_event">
            CNC Servers: <xsl:value-of select="count($cncs_this_event)"/>
          </xsl:when>
          <xsl:otherwise>&#160;</xsl:otherwise>
        </xsl:choose>
      </td>
    </tr>
    <xsl:if test="$os_changes">
      <tr align="left" valign="middle">
        <td colspan="6">
          <table align="left" border="1" cellspacing="0" cellpadding="2" width="100%">
            <thead class="th_color_3">
              <tr>
                <th>Type</th>
                <th>Mode/Class</th>
                <th>Details <span style="font-weight: normal;">(Path/Message/Protocol/Hostname/Qtype/ListenPort etc.)</span></th>
                <th>Process ID</th>
                <th>Parent ID</th>
                <th>File Size</th>
              </tr>
            </thead>
            
            <xsl:for-each select="$os_changes">
              <tr align="left" valign="top">
              <xsl:if test="name()='malicious-alert'"><xsl:attribute name="style">background-color: #E3FAFA</xsl:attribute></xsl:if>
                <td>
                  <xsl:call-template name="capitalize">
                    <xsl:with-param name="string" select="name()" />
                  </xsl:call-template>
                </td>
                <td>
                  <xsl:call-template name="capitalize">
                    <xsl:with-param name="string" select="@classtype|@mode|dllname|@type" />
                  </xsl:call-template> 
                </td>

                <td><!-- <xsl:value-of select="./text()" /> -->
                  <xsl:choose>
                    <xsl:when test="name()='network'">
                      <xsl:apply-templates select="protocol_type|qtype|listen_port|ipaddress|destination_port"/>
                      <xsl:apply-templates select="hostname"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:call-template name="wrap_at">
                        <xsl:with-param name="string" select="./text()" />
                        <xsl:with-param name="wrap_length" select="70" />
                      </xsl:call-template>    
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:variable name="rdm" select="registrypath|driverimage|method"/>
                  <xsl:if test="$rdm">
                    <xsl:call-template name="breaklist">
                      <xsl:with-param name="nodes" select="$rdm"/>
                    </xsl:call-template>
                  </xsl:if>
                  <xsl:apply-templates select="idhook|hookprocaddr|moduleaddr|threadid|apiname|address|display-msg|old_name|new_name|source|target|params|exception_faulting_address|exception_code|exception_level|exception_type|instruction_address|description|classification"/>
                  <xsl:apply-templates select="msg" /> <!-- Ensure 'Detail' comes after 'Message' -->
                  <xsl:choose>
                    <xsl:when test="string-length(value)>0">    
                      <xsl:call-template name="wrap_at">
                        <xsl:with-param name="string" select="value" />
                        <xsl:with-param name="wrap_length" select="100" />
                      </xsl:call-template>
                      <xsl:if test="gui|packed"><br/><xsl:apply-templates select="gui|packed"/></xsl:if>
                      <xsl:if test="parentname"><br/><xsl:apply-templates select="parentname"/></xsl:if>
                      <xsl:if test="cmdline"><br/><xsl:apply-templates select="cmdline"/></xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="path_or_name" select="processinfo/imagepath|processinfo/imagename"/>
                      <xsl:if test="$path_or_name">
                        <xsl:if test="params|ipaddress|address|hostname"><br/></xsl:if>
                        <xsl:apply-templates select="$path_or_name"/>
                      </xsl:if>
                      <xsl:if test="bytesreceived|totalmemory|deltatime"><br/><xsl:apply-templates select="bytesreceived|totalmemory|deltatime"/></xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:choose>
                    <xsl:when test="(string-length(md5sum)=0 or md5sum='N/A') and (string-length(sha1sum)=0 or sha1sum='N/A')"></xsl:when><!-- Neither -->
                    <xsl:when test="(string-length(md5sum)>0 and md5sum!='N/A') and (string-length(sha1sum)>0 and sha1sum!='N/A')">
                      <br/>&#160;&#160;MD5:&#160;&#160;<xsl:value-of select="md5sum" /><br/>&#160;&#160;SHA1:&#160;<xsl:value-of select="sha1sum" /> <!-- Both -->
                    </xsl:when>
                    <xsl:when test="string-length(md5sum)>0 and md5sum!='N/A'"><br/>MD5:&#160;&#160;<xsl:value-of select="md5sum" /></xsl:when> <!-- One -->
                    <xsl:otherwise><br/>&#160;&#160;SHA1:&#160;<xsl:value-of select="sha1sum" /></xsl:otherwise> <!-- The other -->
                  </xsl:choose>
                </td>
                <td>
                  <xsl:choose>
                    <xsl:when test="string-length(pid)=0">
                      <xsl:choose>
                        <xsl:when test="count(.//pid)>1">
                        <table style="border-style: none;">
                          <xsl:for-each select=".//pid">
                            <tr><td><xsl:value-of select="." /></td></tr>
                          </xsl:for-each>
                        </table>
                        </xsl:when>
                        <xsl:when test="count(.//pid)=1"><xsl:value-of select=".//pid" /></xsl:when>
                        <xsl:otherwise>&#160;</xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise><xsl:value-of select="pid" /></xsl:otherwise>
                  </xsl:choose>
                </td>
                <td>
                  <xsl:choose>
                    <xsl:when test="string-length(ppid)=0">&#160;</xsl:when>
                    <xsl:otherwise><xsl:value-of select="ppid" /></xsl:otherwise>
                  </xsl:choose>
                </td>
                <td>
                  <xsl:choose>
                    <xsl:when test="string-length(filesize)=0 or filesize='N/A'">&#160;</xsl:when>
                    <xsl:otherwise><xsl:value-of select="filesize" /></xsl:otherwise>
                  </xsl:choose>
                </td>
             </tr>
            </xsl:for-each>
          </table>
        </td>
      </tr>
    </xsl:if>
    
    <xsl:if test="$cncs_this_event">
      <tr align="left" valign="middle">
        <td colspan="6">
          <table align="left" border="1" cellspacing="0" cellpadding="2" width="100%" white-space="wrap" >
            <thead class="th_color_3">
              <tr align="left" valign="middle">
                <th>CNC Server</th>
                <th>Protocol/Port</th>
                <th>FQC</th>
              </tr>
            </thead>
            <xsl:for-each select="$cncs_this_event">
              <tr align="left" valign="top">
                <td><xsl:value-of select="@server_dns_name" /></td>
                <td>
                  <xsl:choose>
                    <xsl:when test="@ip_proto = '6'">TCP</xsl:when>
                    <xsl:otherwise>UDP</xsl:otherwise>
                  </xsl:choose><xsl:text>/</xsl:text>
                  <xsl:value-of select="@service_port" />
                </td>
                <td>
                  <xsl:call-template name="split">
                    <xsl:with-param name="string" select="@channel" />
                    <xsl:with-param name="delim" select="'::~~'"/>
                    <xsl:with-param name="wrapsize" select="90"/>
                  </xsl:call-template>&#160;
                </td>
              </tr>    
            </xsl:for-each>
          </table>
        </td>
      </tr>
    </xsl:if> 
  </xsl:template> <!-- match="event" -->
  
  <xsl:template match="hostname">
    <xsl:if test="count(preceding-sibling::*)>0 and string-length(.) > 30"><br/></xsl:if>
    &#160;&#160;<i><xsl:text>Hostname</xsl:text></i>:&#160;
    <xsl:call-template name="wrap_at">
      <xsl:with-param name="string" select="." />
      <xsl:with-param name="wrap_length" select="50" />
    </xsl:call-template>
  </xsl:template>
  
  <xsl:template match="source|target|display-msg|msg">
    <xsl:if test="name()='target'"><br/></xsl:if>
    <xsl:if test="string-length(.) > 0">
      <i><xsl:call-template name="capitalize">
            <xsl:with-param name="string" select="name()" />
          </xsl:call-template>
      </i>:&#160;&#160;
      <xsl:choose>
        <xsl:when test="name()='source' or name()='target'"><xsl:value-of select="processinfo/imagepath" /></xsl:when>
        <xsl:otherwise><xsl:value-of select="." /></xsl:otherwise>
      </xsl:choose>
      &#160;&#160;
    </xsl:if>
  </xsl:template>
  
  <!-- These need a <br/> -->
  <xsl:template match="exception_type|description|classification">
    <br/>&#160;&#160;<i>
      <xsl:call-template name="capitalize">
        <xsl:with-param name="string" select="name()" />
      </xsl:call-template>
    </i>:&#160;&#160;<xsl:value-of select="." />
  </xsl:template>
  
  <xsl:template match="protocol_type|qtype|listen_port|destination_port|ipaddress|apiname|address|packed|gui|idhook|hookprocaddr|moduleaddr|threadid|exception_faulting_address|exception_code|exception_level|instruction_address|parentname|cmdline|imagepath|bytesreceived|totalmemory|deltatime"> <!-- |registrypath|driverimage -->
    &#160;
    <i><xsl:call-template name="capitalize">
          <xsl:with-param name="string" select="name()" />
        </xsl:call-template>
    </i>:&#160;&#160;<xsl:value-of select="." />
  </xsl:template>  
  <xsl:template match="old_name|new_name">
    <i>
      <xsl:choose>
        <xsl:when test="name()='old_name'">Old Name</xsl:when>
        <xsl:otherwise>New Name</xsl:otherwise>
      </xsl:choose>
    </i>:&#160;&#160;
    <xsl:call-template name="wrap_at">
      <xsl:with-param name="string" select="." />
      <xsl:with-param name="wrap_length" select="100" />
    </xsl:call-template>
    <br/>
  </xsl:template>
  
  <xsl:template match="params">
    <br/>&#160;&#160;<i>Params</i>
    <xsl:text>:&#160;&#160;[</xsl:text>
    <xsl:for-each select="param">
      <xsl:call-template name="wrap_at">
        <xsl:with-param name="string" select="." />
        <xsl:with-param name="wrap_length" select="50" />
      </xsl:call-template>
      <xsl:if test="not(position()=last())">,&#160;</xsl:if>
    </xsl:for-each>]
  </xsl:template>
  
  <xsl:template name="breaklist">
    <xsl:param name="nodes" />
    <xsl:for-each select="$nodes">
      <xsl:if test="not(position()=1)"><br/>&#160;&#160;</xsl:if>
      <i><xsl:call-template name="capitalize">
            <xsl:with-param name="string" select="name()" />
          </xsl:call-template>
      </i>:&#160;&#160;<xsl:value-of select="." />
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="capitalize">
    <xsl:param name="string" />
    <xsl:choose>
      <xsl:when test="contains(' msg display-msg ipaddress apiname apicall cmdline gui bytesreceived totalmemory deltatime ',concat(' ',$string,' '))">
        <xsl:call-template name="substitution">
          <xsl:with-param name="string" select="$string"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="dstring">
          <xsl:call-template name="replace-string">
            <xsl:with-param name="text" select="$string"/>
            <xsl:with-param name="replace" select="'-'"/>
            <xsl:with-param name="with" select="'_'"/>
          </xsl:call-template>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="contains($dstring,'_')">
            <xsl:call-template name="capitalize">
              <xsl:with-param name="string" select="substring-before($dstring,'_')" />
            </xsl:call-template>&#160; 
            <xsl:call-template name="capitalize">
              <xsl:with-param name="string" select="substring-after($dstring,'_')" />
            </xsl:call-template>        
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="concat(translate(substring($dstring,1,1),'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ'),substring($dstring,2))"/>
          </xsl:otherwise>
        </xsl:choose>      
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template name="substitution">
    <xsl:param name="string" />
    <xsl:choose>
      <xsl:when test="$string='display-msg'">Message</xsl:when>
      <xsl:when test="$string='msg'">Detail</xsl:when>
      <xsl:when test="$string='ipaddress'">IP Address</xsl:when>
      <xsl:when test="$string='apiname'">API Name</xsl:when>
      <xsl:when test="$string='apicall'">API Call</xsl:when>
      <xsl:when test="$string='gui'">GUI</xsl:when>
      <xsl:when test="$string='bytesreceived'">Bytes Received</xsl:when>
      <xsl:when test="$string='totalmemory'">Total Memory</xsl:when>
      <xsl:when test="$string='deltatime'">Delta Time</xsl:when>
      <xsl:when test="$string='cmdline'">Command Line</xsl:when>
      <xsl:otherwise><xsl:value-of select="$string" /></xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template name="break-at-delims">
    <xsl:param name="text" />
    <xsl:param name="delim" />
    <xsl:param name="wrap_length" />
    <xsl:choose>
      <xsl:when test="contains($text,$delim)">
        <xsl:variable name="before" select="substring-before($text,$delim)"/>
        <xsl:call-template name="wrap_at">
          <xsl:with-param name="string" select="$before" />
          <xsl:with-param name="wrap_length" select="$wrap_length" />
        </xsl:call-template>
        <br/>
        <xsl:call-template name="break-at-delims">
          <xsl:with-param name="text" select="substring-after($text,$delim)"/>
          <xsl:with-param name="delim" select="$delim"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="wrap_at">
          <xsl:with-param name="string" select="$text" />
          <xsl:with-param name="wrap_length" select="$wrap_length" />
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template name="split">
    <xsl:param name="string" />
    <xsl:param name="delim" />
    <xsl:param name="wrapsize" />
    <xsl:choose>
      <xsl:when test="contains($string,$delim)">
        <xsl:variable name="before" select="substring-before($string,$delim)"/>
        <xsl:variable name="after" select="substring-after($string,$delim)"/>
        <xsl:call-template name="wrap_at">
          <xsl:with-param name="string" select="$before" />
          <xsl:with-param name="wrap_length" select="$wrapsize" />
        </xsl:call-template>  
        <xsl:if test="$after != '::~~'">
          <br/>
          <xsl:call-template name="split">
            <xsl:with-param name="string" select="$after" />
            <xsl:with-param name="delim" select="$delim" />
            <xsl:with-param name="wrapsize" select="$wrapsize" />
          </xsl:call-template>        
        </xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="wrap_at">
          <xsl:with-param name="string" select="$string" />
          <xsl:with-param name="wrap_length" select="$wrapsize" />
        </xsl:call-template>  
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template name="wrap_at">
    <xsl:param name="string" />
    <xsl:param name="wrap_length" />
    <xsl:choose>
      <xsl:when test="string-length($string) > $wrap_length">
        <xsl:value-of select="substring($string, 1, $wrap_length)" /><br/>
        <xsl:call-template name="wrap_at">
          <xsl:with-param name="string" select="concat('&#160;&#160;&#160;',substring($string, $wrap_length+1))" />
          <xsl:with-param name="wrap_length" select="$wrap_length" />
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise><xsl:value-of select="$string" /></xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template name="replace-string">
    <xsl:param name="text"/>
    <xsl:param name="replace"/>
    <xsl:param name="with"/>
    <xsl:choose>
      <xsl:when test="contains($text,$replace)">
        <xsl:value-of select="substring-before($text,$replace)"/>
        <xsl:value-of select="$with"/>
        <xsl:call-template name="replace-string">
          <xsl:with-param name="text" select="substring-after($text,$replace)"/>
          <xsl:with-param name="replace" select="$replace"/>
          <xsl:with-param name="with" select="$with"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$text"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>

